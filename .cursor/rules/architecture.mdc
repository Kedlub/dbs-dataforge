---
description: 
globs: 
alwaysApply: true
---
# Project Technologies
- The project uses shadcn/ui components (and thus Tailwind css), use shadcn/ui style guides.
    - If you need to import any new component from shadcn/ui, use their cli tool (pnpm dlx shadcn@latest add button)
- The project uses Prisma as ORM, and PostgreSQL as the underlying DB.
- The project uses Next.js App Router in src/ folder.
- The project uses Typescript.
- Create API routes instead of server actions, create them in /src/app/api
- Project uses PNPM as a package manager.
- All Typescript types should be in src/lib/types.ts
- Use sonner for toast notifications.
- Make the UI in Czech.

## Database Functions

To fulfill specific project requirements, custom database functions are implemented directly in PostgreSQL. Prisma does not manage the definition of these functions, but they can be called from the application using `prisma.$queryRaw` or `prisma.$executeRaw`.

The following functions have been created:

1.  `calculate_facility_revenue(p_facility_id UUID, p_start_date DATE, p_end_date DATE) RETURNS DECIMAL`: Calculates the total revenue for a specific facility within a date range based on confirmed reservations.
2.  `check_user_active_reservations(p_user_id UUID) RETURNS INTEGER`: Returns the count of active (confirmed or pending) future reservations for a given user.
3.  `get_facility_availability_summary(p_facility_id UUID, p_check_date DATE) RETURNS TEXT`: Provides a textual summary of the available vs. total time slots for a specific facility on a given date.

These functions are defined in the SQL migration file: [prisma/migrations/20250420131104_add_db_functions/migration.sql](mdc:prisma/migrations/20250420131104_add_db_functions/migration.sql).

## Database Stored Procedures

Similar to functions, custom stored procedures are used for specific actions, especially those involving data modification or transaction control. They are defined directly in PostgreSQL and called via `prisma.$executeRaw` or `prisma.$executeRawUnsafe`.

The following procedures have been created:

1.  `cancel_reservation(p_reservation_id UUID, p_cancellation_reason TEXT)`: Updates a reservation's status to 'cancelled' and records the reason.
2.  `deactivate_user(p_user_id UUID)`: Sets a user's `is_active` flag to false.
3.  `assign_employee_shift(p_employee_id UUID, p_start_time TIMESTAMP WITH TIME ZONE, p_end_time TIMESTAMP WITH TIME ZONE, p_shift_type TEXT)`: Inserts a new work shift for an employee.

These procedures are defined in the SQL migration file: [prisma/migrations/20250420132146_add_stored_procedures/migration.sql](mdc:prisma/migrations/20250420132146_add_stored_procedures/migration.sql).

## Database Triggers

Triggers are used to automatically execute actions in response to specific database events (INSERT, UPDATE, DELETE).

The following triggers have been created:

1.  `trg_facility_status_change`: Executes after an `UPDATE` on the `facilities` table. If the `status` column is changed, it calls the `log_facility_status_change()` function to record the change in the `audit_logs` table (defined as the `AuditLog` model in [prisma/schema.prisma](mdc:prisma/schema.prisma)).
2.  `trg_user_deactivation`: Executes after an `UPDATE` on the `users` table. If the `is_active` column is changed from `true` to `false`, it calls the `cancel_user_future_reservations()` function to cancel all future pending/confirmed reservations for that user.

This trigger (`trg_facility_status_change`) and its associated function are defined in the SQL migration file: [prisma/migrations/20250420132723_add_audit_log_and_trigger/migration.sql](mdc:prisma/migrations/20250420132723_add_audit_log_and_trigger/migration.sql).
The `trg_user_deactivation` trigger and its function are defined in: [prisma/migrations/20250420132921_add_user_deactivation_trigger/migration.sql](mdc:prisma/migrations/20250420132921_add_user_deactivation_trigger/migration.sql).

