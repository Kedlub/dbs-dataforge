// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
  previewFeatures = ["views"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Roles for users in the system
model Role {
  id          String   @id @default(uuid())
  name        String   @unique
  description String?
  createdAt   DateTime @default(now()) @map("created_at")
  users       User[]

  @@map("roles")
}

// Users of the system
model User {
  id               String        @id @default(uuid())
  username         String        @unique
  passwordHash     String        @map("password_hash")
  firstName        String        @map("first_name")
  lastName         String        @map("last_name")
  email            String        @unique
  phone            String?
  registrationDate DateTime      @default(now()) @map("registration_date")
  isActive         Boolean       @default(true) @map("is_active")
  roleId           String        @map("role_id")
  role             Role          @relation(fields: [roleId], references: [id])
  employee         Employee?
  reservations     Reservation[]
  reports          Report[]

  @@map("users")
}

// Employees (extension of User)
model Employee {
  id             String          @id @default(uuid())
  userId         String          @unique @map("user_id")
  user           User            @relation(fields: [userId], references: [id])
  position       String
  hireDate       DateTime        @map("hire_date")
  employeeNumber String          @unique @map("employee_number")
  shifts         EmployeeShift[]

  @@map("employees")
}

// Facilities (sports venues)
model Facility {
  id          String             @id @default(uuid())
  name        String
  description String?
  capacity    Int
  status      String // e.g., "active", "maintenance", "closed"
  openingHour Int                @map("opening_hour") // Hour of day (0-23)
  closingHour Int                @map("closing_hour") // Hour of day (0-23)
  timeSlots   TimeSlot[]
  activities  FacilityActivity[]

  @@map("facilities")
}

// Activities offered at the sports center
model Activity {
  id              String             @id @default(uuid())
  name            String
  description     String?
  durationMinutes Int                @map("duration_minutes")
  price           Decimal
  maxParticipants Int                @map("max_participants")
  isActive        Boolean            @default(true) @map("is_active")
  facilities      FacilityActivity[]
  reservations    Reservation[]

  @@map("activities")
}

// Many-to-many relationship between facilities and activities
model FacilityActivity {
  facilityId String   @map("facility_id")
  activityId String   @map("activity_id")
  facility   Facility @relation(fields: [facilityId], references: [id])
  activity   Activity @relation(fields: [activityId], references: [id])

  @@id([facilityId, activityId])
  @@map("facility_activities")
}

// Time slots for reservations
model TimeSlot {
  id           String        @id @default(uuid())
  facilityId   String        @map("facility_id")
  facility     Facility      @relation(fields: [facilityId], references: [id])
  startTime    DateTime      @map("start_time")
  endTime      DateTime      @map("end_time")
  isAvailable  Boolean       @default(true) @map("is_available")
  reservations Reservation[]

  @@map("time_slots")
}

// Reservations made by users
model Reservation {
  id                 String   @id @default(uuid())
  userId             String   @map("user_id")
  user               User     @relation(fields: [userId], references: [id])
  slotId             String   @map("slot_id")
  timeSlot           TimeSlot @relation(fields: [slotId], references: [id])
  activityId         String   @map("activity_id")
  activity           Activity @relation(fields: [activityId], references: [id])
  createdAt          DateTime @default(now()) @map("created_at")
  status             String // e.g., "confirmed", "cancelled", "pending"
  cancellationReason String?  @map("cancellation_reason")
  totalPrice         Decimal  @map("total_price")
  lastModified       DateTime @updatedAt @map("last_modified")

  @@map("reservations")
}

// Employee work shifts
model EmployeeShift {
  id         String   @id @default(uuid())
  employeeId String   @map("employee_id")
  employee   Employee @relation(fields: [employeeId], references: [id])
  startTime  DateTime @map("start_time")
  endTime    DateTime @map("end_time")
  shiftType  String   @map("shift_type") // e.g., "morning", "afternoon", "evening"

  @@map("employee_shifts")
}

// Reports for management
model Report {
  id          String   @id @default(uuid())
  title       String
  description String?
  generatedBy String   @map("generated_by")
  user        User     @relation(fields: [generatedBy], references: [id])
  generatedAt DateTime @default(now()) @map("generated_at")
  reportType  String   @map("report_type")
  reportData  Json     @map("report_data")

  @@map("reports")
}

// Audit log for tracking changes
model AuditLog {
  id          String    @id @default(uuid())
  tableName   String    @map("table_name")      // e.g., "facilities", "users"
  recordId    String    @map("record_id")       // ID of the record that changed
  columnName  String?   @map("column_name")    // Name of the column that changed (optional)
  oldValue    String?   @map("old_value")       // Previous value
  newValue    String?   @map("new_value")       // New value
  changedAt   DateTime  @default(now()) @map("changed_at")
  changedBy   String?   @map("changed_by")    // User ID who made the change (if available)

  @@index([tableName, recordId])
  @@map("audit_logs")
}

// --- Database Views ---

// View for detailed user reservations
view UserReservationView {
  reservation_id           String    @unique @db.Uuid
  user_id                  String    @db.Uuid
  username                 String
  first_name               String
  last_name                String
  activity_name            String
  facility_name            String
  start_time               DateTime
  end_time                 DateTime
  reservation_status       String
  total_price              Decimal
  reservation_created_at   DateTime

  @@map("vw_user_reservations")
}

// View for facility schedule
view FacilityScheduleView {
  facility_id     String    @db.Uuid
  facility_name   String
  time_slot_id    String    @unique @db.Uuid
  start_time      DateTime
  end_time        DateTime
  is_available    Boolean
  reservation_id  String?   @db.Uuid
  activity_name   String?

  @@map("vw_facility_schedule")
}

// View for employee schedule
view EmployeeScheduleView {
  shift_id    String   @unique @db.Uuid
  employee_id String   @db.Uuid
  first_name  String
  last_name   String
  position    String
  start_time  DateTime
  end_time    DateTime
  shift_type  String

  @@map("vw_employee_schedule")
}
